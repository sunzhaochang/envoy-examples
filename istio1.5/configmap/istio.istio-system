apiVersion: v1
data:
  mesh: |-
    # Set enableTracing to false to disable request tracing.
    enableTracing: true

    # Set accessLogFile to empty string to disable access log.
    accessLogFile: "/dev/stdout"

    accessLogFormat: ""

    accessLogEncoding: 'TEXT'

    enableEnvoyAccessLogService: false
    # reportBatchMaxEntries is the number of requests that are batched before telemetry data is sent to the mixer server
    reportBatchMaxEntries: 100
    # reportBatchMaxTime is the max waiting time before the telemetry data of a request is sent to the mixer server
    reportBatchMaxTime: 1s
    disableMixerHttpReports: true

    # Set the following variable to true to disable policy checks by the Mixer.
    # Note that metrics will still be reported to the Mixer.
    disablePolicyChecks: true

    # Automatic protocol detection uses a set of heuristics to
    # determine whether the connection is using TLS or not (on the
    # server side), as well as the application protocol being used
    # (e.g., http vs tcp). These heuristics rely on the client sending
    # the first bits of data. For server first protocols like MySQL,
    # MongoDB, etc., Envoy will timeout on the protocol detection after
    # the specified period, defaulting to non mTLS plain TCP
    # traffic. Set this field to tweak the period that Envoy will wait
    # for the client to send the first bits of data. (MUST BE >=1ms)
    protocolDetectionTimeout: 100ms

    # This is the k8s ingress service name, update if you used a different name
    ingressService: "istio-ingressgateway"
    ingressControllerMode: "STRICT"
    ingressClass: "istio"

    # The trust domain corresponds to the trust root of a system.
    # Refer to https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE-ID.md#21-trust-domain
    trustDomain: "cluster.local"

    #  The trust domain aliases represent the aliases of trust_domain.
    #  For example, if we have
    #  trustDomain: td1
    #  trustDomainAliases: [“td2”, "td3"]
    #  Any service with the identity "td1/ns/foo/sa/a-service-account", "td2/ns/foo/sa/a-service-account",
    #  or "td3/ns/foo/sa/a-service-account" will be treated the same in the Istio mesh.
    trustDomainAliases:

    # Used by pilot-agent
    sdsUdsPath: "unix:/etc/istio/proxy/SDS"

    # If true, automatically configure client side mTLS settings to match the corresponding service's
    # server side mTLS authentication policy, when destination rule for that service does not specify
    # TLS settings.
    enableAutoMtls: true

    outboundTrafficPolicy:
      mode: ALLOW_ANY
    localityLbSetting:
      enabled: true

    # Configures DNS certificates provisioned through Chiron linked into Pilot.
    # The DNS certificate provisioning is enabled by default now so it get tested.
    # TODO (lei-tang): we'll decide whether enable it by default or not before Istio 1.4 Release.
    certificates:
      []

    defaultConfig:
      #
      # TCP connection timeout between Envoy & the application, and between Envoys.
      connectTimeout: 10s
      #
      ### ADVANCED SETTINGS #############
      # Where should envoy's configuration be stored in the istio-proxy container
      configPath: "/etc/istio/proxy"
      # The pseudo service name used for Envoy.
      serviceCluster: istio-proxy
      # These settings that determine how long an old Envoy
      # process should be kept alive after an occasional reload.
      drainDuration: 45s
      parentShutdownDuration: 1m0s
      #
      # Port where Envoy listens (on local host) for admin commands
      # You can exec into the istio-proxy container in a pod and
      # curl the admin port (curl http://localhost:15000/) to obtain
      # diagnostic information from Envoy. See
      # https://lyft.github.io/envoy/docs/operations/admin.html
      # for more details
      proxyAdminPort: 15000
      #
      # Set concurrency to a specific number to control the number of Proxy worker threads.
      # If set to 0 (default), then start worker thread for each CPU thread/core.
      concurrency: 2
      #
      tracing:
        zipkin:
          # Address of the Zipkin collector
          address: zipkin.istio-system:9411
      # If port is 15012, will use SDS.
      # controlPlaneAuthPolicy is for mounted secrets, will wait for the files.
      controlPlaneAuthPolicy: NONE
      discoveryAddress: istiod.istio-system.svc:15012
  meshNetworks: 'networks: {}'
  values.yaml: |-
    appNamespaces: []
    autoscaleEnabled: false
    autoscaleMax: 5
    autoscaleMin: 1
    configMap: true
    configNamespace: istio-config
    configSource:
      subscribedResources: []
    cpu:
      targetAverageUtilization: 80
    deploymentLabels: {}
    enableProtocolSniffingForInbound: false
    enableProtocolSniffingForOutbound: true
    enabled: true
    env: {}
    hub: ""
    image: pilot
    ingress:
      ingressClass: istio
      ingressControllerMode: STRICT
      ingressService: istio-ingressgateway
    jwksResolverExtraRootCA: ""
    keepaliveMaxServerConnectionAge: 30m
    meshNetworks:
      networks: {}
    namespace: istio-system
    nodeSelector: {}
    plugins: []
    podAnnotations: {}
    podAntiAffinityLabelSelector: []
    podAntiAffinityTermLabelSelector: []
    policy:
      enabled: false
    replicaCount: 1
    resources:
      requests:
        cpu: 500m
        memory: 2048Mi
    rollingMaxSurge: 100%
    rollingMaxUnavailable: 25%
    tag: ""
    tolerations: []
    traceSampling: 1
kind: ConfigMap
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","data":{"mesh":"# Set enableTracing to false to disable request tracing.\nenableTracing: true\n\n# Set accessLogFile to empty string to disable access log.\naccessLogFile: \"/dev/stdout\"\n\naccessLogFormat: \"\"\n\naccessLogEncoding: 'TEXT'\n\nenableEnvoyAccessLogService: false\n# reportBatchMaxEntries is the number of requests that are batched before telemetry data is sent to the mixer server\nreportBatchMaxEntries: 100\n# reportBatchMaxTime is the max waiting time before the telemetry data of a request is sent to the mixer server\nreportBatchMaxTime: 1s\ndisableMixerHttpReports: true\n\n# Set the following variable to true to disable policy checks by the Mixer.\n# Note that metrics will still be reported to the Mixer.\ndisablePolicyChecks: true\n\n# Automatic protocol detection uses a set of heuristics to\n# determine whether the connection is using TLS or not (on the\n# server side), as well as the application protocol being used\n# (e.g., http vs tcp). These heuristics rely on the client sending\n# the first bits of data. For server first protocols like MySQL,\n# MongoDB, etc., Envoy will timeout on the protocol detection after\n# the specified period, defaulting to non mTLS plain TCP\n# traffic. Set this field to tweak the period that Envoy will wait\n# for the client to send the first bits of data. (MUST BE \u003e=1ms)\nprotocolDetectionTimeout: 100ms\n\n# This is the k8s ingress service name, update if you used a different name\ningressService: \"istio-ingressgateway\"\ningressControllerMode: \"STRICT\"\ningressClass: \"istio\"\n\n# The trust domain corresponds to the trust root of a system.\n# Refer to https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE-ID.md#21-trust-domain\ntrustDomain: \"cluster.local\"\n\n#  The trust domain aliases represent the aliases of trust_domain.\n#  For example, if we have\n#  trustDomain: td1\n#  trustDomainAliases: [“td2”, \"td3\"]\n#  Any service with the identity \"td1/ns/foo/sa/a-service-account\", \"td2/ns/foo/sa/a-service-account\",\n#  or \"td3/ns/foo/sa/a-service-account\" will be treated the same in the Istio mesh.\ntrustDomainAliases:\n\n# Used by pilot-agent\nsdsUdsPath: \"unix:/etc/istio/proxy/SDS\"\n\n# If true, automatically configure client side mTLS settings to match the corresponding service's\n# server side mTLS authentication policy, when destination rule for that service does not specify\n# TLS settings.\nenableAutoMtls: true\n\noutboundTrafficPolicy:\n  mode: ALLOW_ANY\nlocalityLbSetting:\n  enabled: true\n\n# Configures DNS certificates provisioned through Chiron linked into Pilot.\n# The DNS certificate provisioning is enabled by default now so it get tested.\n# TODO (lei-tang): we'll decide whether enable it by default or not before Istio 1.4 Release.\ncertificates:\n  []\n\ndefaultConfig:\n  #\n  # TCP connection timeout between Envoy \u0026 the application, and between Envoys.\n  connectTimeout: 10s\n  #\n  ### ADVANCED SETTINGS #############\n  # Where should envoy's configuration be stored in the istio-proxy container\n  configPath: \"/etc/istio/proxy\"\n  # The pseudo service name used for Envoy.\n  serviceCluster: istio-proxy\n  # These settings that determine how long an old Envoy\n  # process should be kept alive after an occasional reload.\n  drainDuration: 45s\n  parentShutdownDuration: 1m0s\n  #\n  # Port where Envoy listens (on local host) for admin commands\n  # You can exec into the istio-proxy container in a pod and\n  # curl the admin port (curl http://localhost:15000/) to obtain\n  # diagnostic information from Envoy. See\n  # https://lyft.github.io/envoy/docs/operations/admin.html\n  # for more details\n  proxyAdminPort: 15000\n  #\n  # Set concurrency to a specific number to control the number of Proxy worker threads.\n  # If set to 0 (default), then start worker thread for each CPU thread/core.\n  concurrency: 2\n  #\n  tracing:\n    zipkin:\n      # Address of the Zipkin collector\n      address: zipkin.istio-system:9411\n  # If port is 15012, will use SDS.\n  # controlPlaneAuthPolicy is for mounted secrets, will wait for the files.\n  controlPlaneAuthPolicy: NONE\n  discoveryAddress: istiod.istio-system.svc:15012","meshNetworks":"networks: {}","values.yaml":"appNamespaces: []\nautoscaleEnabled: false\nautoscaleMax: 5\nautoscaleMin: 1\nconfigMap: true\nconfigNamespace: istio-config\nconfigSource:\n  subscribedResources: []\ncpu:\n  targetAverageUtilization: 80\ndeploymentLabels: {}\nenableProtocolSniffingForInbound: false\nenableProtocolSniffingForOutbound: true\nenabled: true\nenv: {}\nhub: \"\"\nimage: pilot\ningress:\n  ingressClass: istio\n  ingressControllerMode: STRICT\n  ingressService: istio-ingressgateway\njwksResolverExtraRootCA: \"\"\nkeepaliveMaxServerConnectionAge: 30m\nmeshNetworks:\n  networks: {}\nnamespace: istio-system\nnodeSelector: {}\nplugins: []\npodAnnotations: {}\npodAntiAffinityLabelSelector: []\npodAntiAffinityTermLabelSelector: []\npolicy:\n  enabled: false\nreplicaCount: 1\nresources:\n  requests:\n    cpu: 500m\n    memory: 2048Mi\nrollingMaxSurge: 100%\nrollingMaxUnavailable: 25%\ntag: \"\"\ntolerations: []\ntraceSampling: 1"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"operator.istio.io/component":"Pilot","operator.istio.io/managed":"Reconcile","operator.istio.io/version":"1.5.0","release":"istio"},"name":"istio","namespace":"istio-system"}}
  creationTimestamp: "2020-03-28T07:23:43Z"
  labels:
    operator.istio.io/component: Pilot
    operator.istio.io/managed: Reconcile
    operator.istio.io/version: 1.5.0
    release: istio
  name: istio
  namespace: istio-system
  resourceVersion: "6087042"
  selfLink: /api/v1/namespaces/istio-system/configmaps/istio
  uid: 89e503d7-9c91-470b-96bd-7c851e735da9
